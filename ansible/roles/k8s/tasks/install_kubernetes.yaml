# roles/k8s/tasks/install_kubernetes.yaml

# Desactivar swap (requisito para Kubernetes)
- name: Desactivar swap
  shell: |
    swapoff -a
    sed -i '/ swap / s/^/#/' /etc/fstab

# Asegurar que el directorio templates exista
- name: Crear directorio para kubeadm-config.yaml si no existe
  file:
    path: roles/k8s/templates
    state: directory
    mode: '0755'

# Eliminar repositorios de Kubernetes obsoletos
- name: Eliminar repositorio obsoleto de Kubernetes si existe
  file:
    path: /etc/apt/sources.list.d/kubernetes.list
    state: absent

# Instalar conntrack (requisito para Kubernetes)
- name: Instalar conntrack en Master y Workers
  when: "'master' in group_names or 'workers' in group_names"
  apt:
    name: conntrack
    state: present
    update_cache: yes

# Liberar el puerto 10250 si está en uso (de forma persistente)
- name: Liberar puerto 10250 si está en uso de forma persistente
  shell: |
    PID=$(lsof -t -i:10250)
    if [ -n "$PID" ]; then
      kill -9 $PID
    fi
  ignore_errors: yes

# Habilitar IP Forwarding
- name: Habilitar el reenvío de IP (ip_forward)
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes

# Asegurar que kubelet esté habilitado con systemctl o snap
- name: Habilitar kubelet con systemctl o snap si está disponible
  shell: |
    if systemctl list-unit-files | grep -q kubelet.service; then
      systemctl daemon-reload
      systemctl enable kubelet.service
      systemctl start kubelet.service
    elif snap list | grep -q kubelet; then
      snap enable kubelet
      snap start kubelet
    else
      snap install kubelet --classic
      systemctl daemon-reload
      systemctl enable kubelet.service
      systemctl start kubelet.service
    fi
  ignore_errors: yes

# Crear el archivo de configuración de kubeadm si no existe
- name: Crear archivo kubeadm-config.yaml
  copy:
    dest: roles/k8s/templates/kubeadm-config.yaml
    content: |
      apiVersion: kubeadm.k8s.io/v1beta3
      kind: ClusterConfiguration
      kubernetesVersion: "1.31.5"
      controlPlaneEndpoint: "192.168.18.202:6443"
      networking:
        podSubnet: "192.168.0.0/16"
  when: "'master' in group_names"

# Instalar dependencias comunes
- name: Instalar dependencias comunes
  apt:
    name:
      - curl
      - apt-transport-https
      - ca-certificates
      - software-properties-common
    state: latest
    update_cache: yes

# Instalar kubectl en el Load Balancer (solo en el nodo balanceador)
- name: Instalar kubectl en el Load Balancer
  when: "'loadbalancer' in group_names"
  snap:
    name: kubectl
    classic: yes
    state: present

# Instalar kubeadm, kubelet y kubectl en el Master y Workers usando Snap
- name: Instalar kubeadm en Master y Workers
  when: "'master' in group_names or 'workers' in group_names"
  snap:
    name: kubeadm
    classic: yes
    state: present

- name: Instalar kubelet en Master y Workers
  when: "'master' in group_names or 'workers' in group_names"
  snap:
    name: kubelet
    classic: yes
    state: present

- name: Verificar instalación de kubelet
  shell: "which kubelet"
  register: kubelet_check
  ignore_errors: yes

- name: Iniciar y habilitar kubelet si está instalado
  systemd:
    name: kubelet
    enabled: yes
    state: started
  when: kubelet_check.rc == 0

- name: Instalar kubectl en Master y Workers
  when: "'master' in group_names or 'workers' in group_names"
  snap:
    name: kubectl
    classic: yes
    state: present

# Instalar containerd (en Master y Workers)
- name: Instalar containerd en Master y Workers
  when: "'master' in group_names or 'workers' in group_names"
  apt:
    name: containerd
    state: latest
    update_cache: yes

# Habilitar y arrancar containerd
- name: Habilitar y arrancar containerd
  when: "'master' in group_names or 'workers' in group_names"
  systemd:
    name: containerd
    enabled: yes
    state: restarted

# Configurar kubelet para usar containerd
- name: Configurar kubelet para usar containerd
  when: "'master' in group_names or 'workers' in group_names"
  copy:
    dest: /etc/default/kubelet
    content: |
      KUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock
  notify:
    - Reiniciar kubelet

# Inicializar el clúster Kubernetes (solo en Master)
- name: Inicializar el clúster Kubernetes (solo en Master)
  when: "'master' in group_names"
  shell: |
    kubeadm reset -f
    kubeadm init --ignore-preflight-errors=Port-10250 --config=roles/k8s/templates/kubeadm-config.yaml
  register: kubeadm_init

# Configurar kubectl para el usuario actual (solo en Master)
- name: Configurar kubectl para el usuario actual (solo en Master)
  when: "'master' in group_names"
  shell: |
    mkdir -p $HOME/.kube
    cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    chown $(id -u):$(id -g) $HOME/.kube/config

# Generar token de unión para los nodos Worker
- name: Generar token de unión para los nodos Worker
  when: "'master' in group_names"
  shell: kubeadm token create --print-join-command
  register: join_command
  changed_when: true

# Guardar el comando de unión para los Workers
- name: Guardar el comando de unión para los Workers
  set_fact:
    worker_join_command: "{{ join_command.stdout }}"
  when: "'master' in group_names"

# Unir Worker al clúster de forma automática
- name: Unir Worker al clúster de forma automática
  when: "'workers' in group_names and hostvars[groups['master'][0]].worker_join_command is defined"
  shell: |
    kubeadm reset -f
    {{ hostvars[groups['master'][0]].worker_join_command }}
  changed_when: true

# Verificar el estado de los nodos
- name: Verificar que los nodos estén en estado Ready
  when: "'master' in group_names"
  shell: |
    kubectl get nodes --no-headers | awk '{print $2}' | grep -v Ready && exit 1 || exit 0
  register: node_status
  retries: 5
  delay: 10
  until: node_status.rc == 0

# Handlers
- name: Reiniciar kubelet
  systemd:
    name: kubelet
    state: restarted
    enabled: yes
