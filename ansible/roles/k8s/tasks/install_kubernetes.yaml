# roles/k8s/tasks/install_kubernetes.yaml

# Desactivar swap (requisito para Kubernetes)
- name: Desactivar swap
  shell: |
    swapoff -a
    sed -i '/ swap / s/^/#/' /etc/fstab

# Instalar dependencias comunes
- name: Instalar dependencias comunes
  apt:
    name:
      - curl
      - apt-transport-https
      - ca-certificates
      - software-properties-common
    state: latest
    update_cache: yes

# Instalar kubectl en el Load Balancer (solo en el nodo balanceador)
- name: Instalar kubectl en el Load Balancer
  when: "'loadbalancer' in group_names"
  snap:
    name: kubectl
    classic: yes
    state: present

# Instalar kubeadm, kubelet y kubectl en el Master y Workers usando Snap
- name: Instalar kubeadm en Master y Workers
  when: "'master' in group_names or 'workers' in group_names"
  snap:
    name: kubeadm
    classic: yes
    state: present

- name: Instalar kubelet en Master y Workers
  when: "'master' in group_names or 'workers' in group_names"
  snap:
    name: kubelet
    classic: yes
    state: present

- name: Instalar kubectl en Master y Workers
  when: "'master' in group_names or 'workers' in group_names"
  snap:
    name: kubectl
    classic: yes
    state: present

# Instalar containerd (en Master y Workers)
- name: Instalar containerd en Master y Workers
  when: "'master' in group_names or 'workers' in group_names"
  apt:
    name: containerd
    state: latest
    update_cache: yes

# Habilitar y arrancar containerd
- name: Habilitar y arrancar containerd
  when: "'master' in group_names or 'workers' in group_names"
  systemd:
    name: containerd
    enabled: yes
    state: restarted

# Configurar kubelet para usar containerd
- name: Configurar kubelet para usar containerd
  when: "'master' in group_names or 'workers' in group_names"
  copy:
    dest: /etc/default/kubelet
    content: |
      KUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock
  notify:
    - Reiniciar kubelet

# Inicializar el clúster Kubernetes (solo en Master)
- name: Inicializar el clúster Kubernetes (solo en Master)
  when: "'master' in group_names"
  shell: |
    kubeadm reset -f
    kubeadm init --config=roles/k8s/templates/kubeadm-config.yaml
  register: kubeadm_init

# Configurar kubectl para el usuario actual (solo en Master)
- name: Configurar kubectl para el usuario actual (solo en Master)
  when: "'master' in group_names"
  shell: |
    mkdir -p $HOME/.kube
    cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    chown $(id -u):$(id -g) $HOME/.kube/config

# Generar token de unión para los nodos Worker
- name: Generar token de unión para los nodos Worker
  when: "'master' in group_names"
  shell: kubeadm token create --print-join-command
  register: join_command
  changed_when: true

# Guardar el comando de unión para los Workers
- name: Guardar el comando de unión para los Workers
  set_fact:
    worker_join_command: "{{ join_command.stdout }}"
  when: "'master' in group_names"

# Unir Worker al clúster de forma automática
- name: Unir Worker al clúster de forma automática
  when: "'workers' in group_names and hostvars[groups['master'][0]].worker_join_command is defined"
  shell: |
    kubeadm reset -f
    {{ hostvars[groups['master'][0]].worker_join_command }}
  changed_when: true

# Verificar el estado de los nodos
- name: Verificar que los nodos estén en estado Ready
  when: "'master' in group_names"
  shell: |
    kubectl get nodes --no-headers | awk '{print $2}' | grep -v Ready && exit 1 || exit 0
  register: node_status
  retries: 5
  delay: 10
  until: node_status.rc == 0

# Handlers
- name: Reiniciar kubelet
  systemd:
    name: kubelet
    enabled: yes
    state: restarted
    